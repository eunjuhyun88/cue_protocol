// ============================================================================
// üìÅ backend/src/config/index.ts - ÌÜµÌï© ÏÑ§Ï†ï export (import ÏóêÎü¨ Ìï¥Í≤∞)
// üéØ Î™©Ï†Å: config import ÏóêÎü¨ ÏôÑÏ†Ñ Ìï¥Í≤∞
// ============================================================================

import dotenv from 'dotenv';
import path from 'path';

// ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎî©
dotenv.config({ path: path.join(__dirname, '../../.env') });

console.log('üîß Config Î™®Îìà Î°úÎî© Ï§ë...');

// ============================================================================
// üîß ÏïàÏ†ÑÌïú Config Import Î∞è Export
// ============================================================================

// DatabaseConfig import with fallback
let DatabaseConfig: any;
try {
  const dbModule = require('./database');
  DatabaseConfig = dbModule.DatabaseConfig || dbModule.default;
  
  if (!DatabaseConfig) {
    throw new Error('DatabaseConfig not found');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è DatabaseConfig import Ïã§Ìå®, fallback ÏÇ¨Ïö©:', error);
  
  // Fallback DatabaseConfig
  DatabaseConfig = {
    async initialize() {
      console.log('‚úÖ DatabaseConfig fallback Ï¥àÍ∏∞Ìôî');
      return true;
    },
    
    async disconnect() {
      console.log('üîå DatabaseConfig fallback Ïó∞Í≤∞ Ìï¥Ï†ú');
      return true;
    },
    
    getConnectionString() {
      return process.env.SUPABASE_URL || 'fallback-connection';
    },
    
    isConnected() {
      return !!process.env.SUPABASE_URL;
    }
  };
}

// AuthConfig import with fallback
let AuthConfig: any;
try {
  const authModule = require('./auth');
  AuthConfig = authModule.AuthConfig || authModule.default;
  
  if (!AuthConfig) {
    throw new Error('AuthConfig not found');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è AuthConfig import Ïã§Ìå®, fallback ÏÇ¨Ïö©:', error);
  
  // Fallback AuthConfig
  AuthConfig = {
    getInstance() {
      return {
        JWT_SECRET: process.env.JWT_SECRET || 'fallback-jwt-secret',
        JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '30d',
        WEBAUTHN_RP_NAME: process.env.WEBAUTHN_RP_NAME || 'AI Personal',
        WEBAUTHN_RP_ID: process.env.WEBAUTHN_RP_ID || 'localhost',
        WEBAUTHN_ORIGIN: process.env.WEBAUTHN_ORIGIN || 'http://localhost:3000',
        DATABASE_TYPE: 'supabase' as const,
        
        validateCurrentConfig() {
          const errors: string[] = [];
          
          if (!this.JWT_SECRET || this.JWT_SECRET === 'fallback-jwt-secret') {
            errors.push('JWT_SECRET not configured');
          }
          
          if (!this.WEBAUTHN_RP_NAME || this.WEBAUTHN_RP_NAME === 'AI Personal') {
            errors.push('WEBAUTHN_RP_NAME not configured');
          }
          
          return {
            valid: errors.length === 0,
            errors
          };
        },
        
        getSummary() {
          return `AuthConfig Summary:
- JWT: ${this.JWT_SECRET ? '‚úÖ Configured' : '‚ùå Missing'}
- WebAuthn: ${this.WEBAUTHN_RP_NAME ? '‚úÖ Configured' : '‚ùå Missing'}
- Database: ${this.DATABASE_TYPE}`;
        }
      };
    }
  };
}

// APIConfig fallback (ÏÉàÎ°ú ÏÉùÏÑ±)
const APIConfig = {
  PORT: parseInt(process.env.PORT || '3001'),
  HOST: process.env.HOST || 'localhost',
  NODE_ENV: process.env.NODE_ENV || 'development',
  CORS_ORIGIN: process.env.FRONTEND_URL || 'http://localhost:3000',
  
  // Rate limiting
  RATE_LIMIT_WINDOW: 15 * 60 * 1000, // 15 minutes
  RATE_LIMIT_MAX: process.env.NODE_ENV === 'production' ? 100 : 1000,
  
  // Request limits
  MAX_REQUEST_SIZE: '10mb',
  
  // Security
  HELMET_CONFIG: {
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:"],
        connectSrc: ["'self'", "ws:", "wss:"]
      }
    },
    crossOriginEmbedderPolicy: false
  },
  
  // Logging
  LOG_LEVEL: process.env.LOG_LEVEL || 'info',
  LOG_FORMAT: process.env.NODE_ENV === 'production' ? 'combined' : 'dev',
  
  getServerInfo() {
    return {
      port: this.PORT,
      host: this.HOST,
      environment: this.NODE_ENV,
      corsOrigin: this.CORS_ORIGIN,
      rateLimit: {
        window: this.RATE_LIMIT_WINDOW,
        max: this.RATE_LIMIT_MAX
      }
    };
  }
};

// ============================================================================
// üåê ÌôòÍ≤ΩÎ≥ÄÏàò ÌÜµÌï© Í¥ÄÎ¶¨
// ============================================================================

export const EnvironmentConfig = {
  // Server
  NODE_ENV: process.env.NODE_ENV || 'development',
  PORT: parseInt(process.env.PORT || '3001'),
  HOST: process.env.HOST || 'localhost',
  
  // Frontend
  FRONTEND_URL: process.env.FRONTEND_URL || 'http://localhost:3000',
  
  // Database
  SUPABASE_URL: process.env.SUPABASE_URL || '',
  SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY || '',
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || '',
  
  // Authentication
  JWT_SECRET: process.env.JWT_SECRET || '',
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '30d',
  
  // WebAuthn
  WEBAUTHN_RP_NAME: process.env.WEBAUTHN_RP_NAME || 'AI Personal',
  WEBAUTHN_RP_ID: process.env.WEBAUTHN_RP_ID || 'localhost',
  WEBAUTHN_ORIGIN: process.env.WEBAUTHN_ORIGIN || 'http://localhost:3000',
  
  // AI Services
  OLLAMA_URL: process.env.OLLAMA_URL || 'http://localhost:11434',
  OPENAI_API_KEY: process.env.OPENAI_API_KEY || '',
  
  // Validation
  validate() {
    const errors: string[] = [];
    const warnings: string[] = [];
    
    // Critical checks
    if (!this.SUPABASE_URL) {
      errors.push('SUPABASE_URL is required');
    }
    
    if (!this.SUPABASE_SERVICE_ROLE_KEY) {
      errors.push('SUPABASE_SERVICE_ROLE_KEY is required');
    }
    
    if (!this.JWT_SECRET || this.JWT_SECRET.length < 32) {
      errors.push('JWT_SECRET must be at least 32 characters long');
    }
    
    // Warning checks
    if (this.NODE_ENV === 'production') {
      if (this.FRONTEND_URL.includes('localhost')) {
        warnings.push('FRONTEND_URL should not use localhost in production');
      }
      
      if (!this.OPENAI_API_KEY && !this.OLLAMA_URL) {
        warnings.push('No AI service configured (OPENAI_API_KEY or OLLAMA_URL)');
      }
    }
    
    return {
      valid: errors.length === 0,
      errors,
      warnings
    };
  },
  
  getStatus() {
    const validation = this.validate();
    
    return {
      environment: this.NODE_ENV,
      validation,
      services: {
        database: !!this.SUPABASE_URL && !!this.SUPABASE_SERVICE_ROLE_KEY,
        authentication: !!this.JWT_SECRET,
        webauthn: !!this.WEBAUTHN_RP_NAME,
        ai: !!this.OLLAMA_URL || !!this.OPENAI_API_KEY,
        frontend: !!this.FRONTEND_URL
      },
      timestamp: new Date().toISOString()
    };
  }
};

// ============================================================================
// üîß ÏÑ§Ï†ï ÌÜµÌï© Ïú†Ìã∏Î¶¨Ìã∞
// ============================================================================

export const ConfigManager = {
  database: DatabaseConfig,
  auth: AuthConfig,
  api: APIConfig,
  environment: EnvironmentConfig,
  
  // Ï†ÑÏ≤¥ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî
  async initializeAll() {
    console.log('üöÄ Î™®Îì† ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Ï§ë...');
    
    try {
      // ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù
      const envValidation = EnvironmentConfig.validate();
      if (!envValidation.valid) {
        console.error('‚ùå ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ÄÏ¶ù Ïã§Ìå®:', envValidation.errors);
        throw new Error(`ÌôòÍ≤ΩÎ≥ÄÏàò Ïò§Î•ò: ${envValidation.errors.join(', ')}`);
      }
      
      if (envValidation.warnings.length > 0) {
        console.warn('‚ö†Ô∏è ÌôòÍ≤ΩÎ≥ÄÏàò Í≤ΩÍ≥†:', envValidation.warnings);
      }
      
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
      await DatabaseConfig.initialize();
      console.log('‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      
      // Ïù∏Ï¶ù ÏÑ§Ï†ï Í≤ÄÏ¶ù
      const authInstance = AuthConfig.getInstance();
      const authValidation = authInstance.validateCurrentConfig();
      if (!authValidation.valid) {
        console.warn('‚ö†Ô∏è Ïù∏Ï¶ù ÏÑ§Ï†ï Í≤ΩÍ≥†:', authValidation.errors);
      } else {
        console.log('‚úÖ Ïù∏Ï¶ù ÏÑ§Ï†ï Í≤ÄÏ¶ù ÏôÑÎ£å');
      }
      
      console.log('üéâ Î™®Îì† ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
      return true;
      
    } catch (error: any) {
      console.error('‚ùå ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
      throw error;
    }
  },
  
  // Ï†ÑÏ≤¥ ÏÑ§Ï†ï ÏÉÅÌÉú ÌôïÏù∏
  getOverallStatus() {
    return {
      database: DatabaseConfig.isConnected ? DatabaseConfig.isConnected() : false,
      auth: AuthConfig.getInstance().validateCurrentConfig().valid,
      environment: EnvironmentConfig.validate().valid,
      api: {
        port: APIConfig.PORT,
        environment: APIConfig.NODE_ENV
      },
      timestamp: new Date().toISOString()
    };
  },
  
  // ÏÑ§Ï†ï ÏöîÏïΩ Ï∂úÎ†•
  printSummary() {
    console.log('üìã === ÏÑ§Ï†ï ÏöîÏïΩ ===');
    console.log(`üåç ÌôòÍ≤Ω: ${EnvironmentConfig.NODE_ENV}`);
    console.log(`üö™ Ìè¨Ìä∏: ${APIConfig.PORT}`);
    console.log(`üîó ÌîÑÎ°†Ìä∏ÏóîÎìú: ${EnvironmentConfig.FRONTEND_URL}`);
    console.log(`üóÑÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§: ${EnvironmentConfig.SUPABASE_URL ? '‚úÖ Supabase' : '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
    console.log(`üîê JWT: ${EnvironmentConfig.JWT_SECRET ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
    console.log(`üéØ WebAuthn: ${EnvironmentConfig.WEBAUTHN_RP_NAME}`);
    console.log(`ü§ñ AI ÏÑúÎπÑÏä§: ${EnvironmentConfig.OLLAMA_URL || EnvironmentConfig.OPENAI_API_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ö†Ô∏è ÎØ∏ÏÑ§Ï†ï'}`);
    
    const envStatus = EnvironmentConfig.getStatus();
    if (!envStatus.validation.valid) {
      console.log('‚ùå ÏÑ§Ï†ï Ïò§Î•ò:', envStatus.validation.errors);
    }
    if (envStatus.validation.warnings.length > 0) {
      console.log('‚ö†Ô∏è ÏÑ§Ï†ï Í≤ΩÍ≥†:', envStatus.validation.warnings);
    }
    console.log('========================');
  }
};

// ============================================================================
// üì§ Export
// ============================================================================

export { DatabaseConfig, AuthConfig, APIConfig };

// Default export
export default {
  DatabaseConfig,
  AuthConfig,
  APIConfig,
  EnvironmentConfig,
  ConfigManager
};

// Ï¥àÍ∏∞Ìôî Ïãú ÏöîÏïΩ Ï∂úÎ†•
if (process.env.NODE_ENV !== 'test') {
  ConfigManager.printSummary();
}

console.log('‚úÖ Config Î™®Îìà Î°úÎî© ÏôÑÎ£å');