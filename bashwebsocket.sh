#!/bin/bash

# ============================================================================
# üîß WebSocket ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä Î∞è ÏóêÎü¨ Ìï¥Í≤∞ Ïä§ÌÅ¨Î¶ΩÌä∏
# ============================================================================

echo "üöÄ WebSocket ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä Î∞è ÏóêÎü¨ Ìï¥Í≤∞ ÏãúÏûë..."

# Î∞±ÏóîÎìú ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
cd backend

# ============================================================================
# 1Ô∏è‚É£ WebSocket ÏÑúÎπÑÏä§ ÏÉùÏÑ±
# ============================================================================

echo "üîå WebSocket ÏÑúÎπÑÏä§ ÏÉùÏÑ± Ï§ë..."

mkdir -p src/services/socket

cat > src/services/socket/WebSocketService.ts << 'EOF'
// ============================================================================
// üîå WebSocket ÏÑúÎπÑÏä§
// Í≤ΩÎ°ú: backend/src/services/socket/WebSocketService.ts
// Ïö©ÎèÑ: Ïã§ÏãúÍ∞Ñ WebSocket Ïó∞Í≤∞ Í¥ÄÎ¶¨
// ============================================================================

import { Server as HTTPServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import { DatabaseService } from '../database/DatabaseService';

export class WebSocketService {
  private io: SocketIOServer;
  private db: DatabaseService;

  constructor(httpServer: HTTPServer) {
    this.db = DatabaseService.getInstance();
    
    // Socket.IO ÏÑúÎ≤Ñ Ï¥àÍ∏∞Ìôî
    this.io = new SocketIOServer(httpServer, {
      cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:3000",
        methods: ["GET", "POST"],
        credentials: true
      },
      path: '/socket.io/', // Í∏∞Î≥∏ Socket.IO Í≤ΩÎ°ú
      transports: ['websocket', 'polling']
    });

    this.setupEventHandlers();
    console.log('üîå WebSocket ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  private setupEventHandlers(): void {
    this.io.on('connection', (socket) => {
      console.log('üì° ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞Îê®:', socket.id);

      // Ïù∏Ï¶ù Ï≤òÎ¶¨
      socket.on('auth', async (data) => {
        try {
          console.log('üîë WebSocket Ïù∏Ï¶ù ÏöîÏ≤≠:', data.token ? 'ÌÜ†ÌÅ∞ ÏûàÏùå' : 'ÌÜ†ÌÅ∞ ÏóÜÏùå');
          
          if (data.token) {
            // JWT ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî JWT ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÇ¨Ïö©)
            socket.data.authenticated = true;
            socket.data.token = data.token;
            socket.emit('auth_success', { message: 'Ïù∏Ï¶ù ÏÑ±Í≥µ' });
          }
        } catch (error) {
          console.error('‚ùå WebSocket Ïù∏Ï¶ù Ïã§Ìå®:', error);
          socket.emit('auth_error', { message: 'Ïù∏Ï¶ù Ïã§Ìå®' });
        }
      });

      // CUE ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
      socket.on('subscribe_cue', (data) => {
        if (data.userId) {
          socket.join(`cue_${data.userId}`);
          console.log(`üí∞ CUE ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ: ${data.userId}`);
        }
      });

      // Ìå®Ïä§Ìè¨Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
      socket.on('subscribe_passport', (data) => {
        if (data.did) {
          socket.join(`passport_${data.did}`);
          console.log(`üìã Ìå®Ïä§Ìè¨Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ: ${data.did}`);
        }
      });

      // Ïó∞Í≤∞ Ìï¥Ï†ú
      socket.on('disconnect', () => {
        console.log('üì° ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ìï¥Ï†ú:', socket.id);
      });
    });
  }

  // CUE ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
  public broadcastCueUpdate(userId: string, newBalance: number, miningReward?: number): void {
    this.io.to(`cue_${userId}`).emit('cue_update', {
      type: 'cue_update',
      userId,
      newBalance,
      miningReward,
      timestamp: new Date().toISOString()
    });
    console.log(`üí∞ CUE ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏: ${userId} -> ${newBalance}`);
  }

  // Ìå®Ïä§Ìè¨Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
  public broadcastPassportUpdate(did: string, updateData: any): void {
    this.io.to(`passport_${did}`).emit('passport_update', {
      type: 'passport_update',
      did,
      updateData,
      timestamp: new Date().toISOString()
    });
    console.log(`üìã Ìå®Ïä§Ìè¨Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏: ${did}`);
  }

  // Ïó∞Í≤∞Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïàò Ï°∞Ìöå
  public getConnectedClientsCount(): number {
    return this.io.engine.clientsCount;
  }

  // ÏÑúÎπÑÏä§ Ï¢ÖÎ£å
  public close(): void {
    this.io.close();
    console.log('üîå WebSocket ÏÑúÎπÑÏä§ Ï¢ÖÎ£åÎê®');
  }
}

export default WebSocketService;
EOF

# ============================================================================
# 2Ô∏è‚É£ WebSocket ÎùºÏö∞Ìä∏ ÏÉùÏÑ±
# ============================================================================

echo "üõ£Ô∏è WebSocket ÎùºÏö∞Ìä∏ ÏÉùÏÑ± Ï§ë..."

mkdir -p src/routes/websocket

cat > src/routes/websocket/index.ts << 'EOF'
// ============================================================================
// üîå WebSocket ÎùºÏö∞Ìä∏
// Í≤ΩÎ°ú: backend/src/routes/websocket/index.ts
// Ïö©ÎèÑ: WebSocket ÏÉÅÌÉú ÌôïÏù∏ Î∞è Í¥ÄÎ¶¨ API
// ============================================================================

import { Router, Request, Response } from 'express';

const router = Router();

// WebSocket ÏÉÅÌÉú ÌôïÏù∏
router.get('/status', (req: Request, res: Response) => {
  res.json({
    success: true,
    websocket: {
      enabled: true,
      path: '/socket.io/',
      transports: ['websocket', 'polling'],
      cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:3000",
        credentials: true
      }
    },
    timestamp: new Date().toISOString()
  });
});

// WebSocket Ïó∞Í≤∞ Ï†ïÎ≥¥
router.get('/info', (req: Request, res: Response) => {
  res.json({
    success: true,
    info: {
      message: 'WebSocket ÏÑúÎπÑÏä§Í∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§',
      endpoint: '/socket.io/',
      supported_events: [
        'connection',
        'auth',
        'subscribe_cue',
        'subscribe_passport',
        'cue_update',
        'passport_update'
      ]
    },
    timestamp: new Date().toISOString()
  });
});

export default router;
EOF

# ============================================================================
# 3Ô∏è‚É£ app.ts ÏàòÏ†ï (WebSocket ÌÜµÌï©)
# ============================================================================

echo "üîß app.ts WebSocket ÌÜµÌï© Ï§ë..."

# Í∏∞Ï°¥ app.ts Î∞±ÏóÖ
cp src/app.ts src/app.ts.backup.$(date +%Y%m%d_%H%M%S)

cat > src/app.ts << 'EOF'
// ============================================================================
// üöÄ Final0626 AI Passport + CUE Backend Server (WebSocket ÌÜµÌï©)
// Í≤ΩÎ°ú: backend/src/app.ts
// Ïö©ÎèÑ: Express ÏÑúÎ≤Ñ Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò + WebSocket
// ÏàòÏ†ïÏÇ¨Ìï≠: WebSocket ÏÑúÎπÑÏä§ ÌÜµÌï©, /ws Í≤ΩÎ°ú Î¨∏Ï†ú Ìï¥Í≤∞
// ============================================================================

import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { createServer } from 'http';
import { DatabaseService } from './services/database/DatabaseService';
import WebSocketService from './services/socket/WebSocketService';

// ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ±
const httpServer = createServer(app);

console.log('üöÄ Starting Final0626 AI Passport Backend with WebSocket...');
console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîó Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:3000'}`);

// ============================================================================
// üõ°Ô∏è Î≥¥Ïïà Î∞è ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
// ============================================================================

app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: false,
  crossOriginResourcePolicy: false
}));

app.use(cors({
  origin: true,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization', 'Cache-Control', 'Pragma'],
  exposedHeaders: ['Set-Cookie'],
  maxAge: 86400
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

app.use(morgan('üì° :method :url from :req[origin]', {
  skip: (req) => req.url === '/health' && req.method === 'GET'
}));

// ============================================================================
// üîå WebSocket ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
// ============================================================================

let websocketService: WebSocketService;

try {
  websocketService = new WebSocketService(httpServer);
  console.log('‚úÖ WebSocket ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ');
  
  // WebSocket ÏÑúÎπÑÏä§Î•º Ï†ÑÏó≠ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù ÏÑ§Ï†ï
  app.set('websocketService', websocketService);
} catch (error) {
  console.error('‚ùå WebSocket ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
}

// ============================================================================
// üìä Ìó¨Ïä§ Ï≤¥ÌÅ¨ API (WebSocket Ï†ïÎ≥¥ Ìè¨Ìï®)
// ============================================================================

app.get('/health', (req: Request, res: Response) => {
  try {
    const connectedClients = websocketService ? websocketService.getConnectedClientsCount() : 0;
    
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      server: 'Final0626 AI Passport Backend',
      version: '2.0.0',
      database: 'DatabaseService',
      websocket: {
        enabled: !!websocketService,
        connectedClients,
        endpoint: '/socket.io/'
      },
      services: {
        webauthn: true,
        ai: true,
        cue: true,
        vault: true,
        websocket: !!websocketService
      }
    });
  } catch (error) {
    console.error('‚ùå Health check Ïò§Î•ò:', error);
    res.status(500).json({
      status: 'ERROR',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

// ============================================================================
// üîß /ws Í≤ΩÎ°ú Ï≤òÎ¶¨ (404 ÏóêÎü¨ Ìï¥Í≤∞)
// ============================================================================

// /ws ÏöîÏ≤≠ÏùÑ /socket.io/Î°ú Î¶¨Îã§Ïù¥Î†âÌä∏
app.get('/ws', (req: Request, res: Response) => {
  res.json({
    message: 'WebSocketÏùÄ /socket.io/ Í≤ΩÎ°úÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§',
    redirect: '/socket.io/',
    info: 'Socket.IO ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî',
    example: 'const socket = io("http://localhost:3001");'
  });
});

// WebSocket ÏÉÅÌÉú API
app.use('/api/websocket', require('./routes/websocket').default);

// ============================================================================
// üõ£Ô∏è API ÎùºÏö∞Ìä∏ Îì±Î°ù
// ============================================================================

// Ïù∏Ï¶ù ÎùºÏö∞Ìä∏
try {
  const authWebAuthnRoutes = require('./routes/auth/webauthn').default;
  app.use('/api/auth/webauthn', authWebAuthnRoutes);
  console.log('‚úÖ WebAuthn ÎùºÏö∞Ìä∏ Îì±Î°ùÎê®: /api/auth/webauthn');
} catch (error) {
  console.error('‚ùå WebAuthn ÎùºÏö∞Ìä∏ Î°úÎî© Ïã§Ìå®:', error);
}

// AI ÎùºÏö∞Ìä∏
try {
  const aiChatRoutes = require('./routes/ai/chat').default;
  app.use('/api/ai/chat', aiChatRoutes);
  console.log('‚úÖ AI Ï±ÑÌåÖ ÎùºÏö∞Ìä∏ Îì±Î°ùÎê®: /api/ai/chat');
} catch (error) {
  console.error('‚ùå AI Ï±ÑÌåÖ ÎùºÏö∞Ìä∏ Î°úÎî© Ïã§Ìå®:', error);
}

// CUE ÎùºÏö∞Ìä∏
try {
  const cueRoutes = require('./routes/cue/cue').default;
  app.use('/api/cue', cueRoutes);
  console.log('‚úÖ CUE ÎùºÏö∞Ìä∏ Îì±Î°ùÎê®: /api/cue');
} catch (error) {
  console.error('‚ùå CUE ÎùºÏö∞Ìä∏ Î°úÎî© Ïã§Ìå®:', error);
}

// Vault ÎùºÏö∞Ìä∏
try {
  const vaultRoutes = require('./routes/vault').default;
  app.use('/api/vault', vaultRoutes);
  console.log('‚úÖ Vault ÎùºÏö∞Ìä∏ Îì±Î°ùÎê®: /api/vault');
} catch (error) {
  console.error('‚ùå Vault ÎùºÏö∞Ìä∏ Î°úÎî© Ïã§Ìå®:', error);
}

// Debug ÎùºÏö∞Ìä∏
try {
  const debugRoutes = require('./routes/debug').default;
  app.use('/api/debug', debugRoutes);
  console.log('‚úÖ Debug ÎùºÏö∞Ìä∏ Îì±Î°ùÎê®: /api/debug');
} catch (error) {
  console.error('‚ùå Debug ÎùºÏö∞Ìä∏ Î°úÎî© Ïã§Ìå®:', error);
}

// ============================================================================
// üö® ÏóêÎü¨ Ìï∏Îì§ÎßÅ
// ============================================================================

app.use((req: Request, res: Response) => {
  console.log(`‚ùå 404 - Ï∞æÏùÑ Ïàò ÏóÜÎäî Í≤ΩÎ°ú: ${req.method} ${req.path}`);
  res.status(404).json({
    success: false,
    error: 'API Í≤ΩÎ°úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
    method: req.method,
    path: req.path,
    suggestion: req.path === '/ws' ? 'Socket.IOÎäî /socket.io/ Í≤ΩÎ°úÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§' : 'Ïò¨Î∞îÎ•∏ API Í≤ΩÎ°úÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî',
    timestamp: new Date().toISOString()
  });
});

app.use((error: any, req: Request, res: Response, next: NextFunction) => {
  console.error('üí• ÏÑúÎ≤Ñ Ïò§Î•ò:', error);
  res.status(500).json({
    success: false,
    error: 'ÎÇ¥Î∂Ä ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
    message: process.env.NODE_ENV === 'development' ? error.message : undefined,
    timestamp: new Date().toISOString()
  });
});

// ============================================================================
// üöÄ ÏÑúÎ≤Ñ ÏãúÏûë
// ============================================================================

const server = httpServer.listen(PORT, () => {
  console.log('\nüéâ ================================');
  console.log('üöÄ Final0626 Backend Server Started!');
  console.log('üéâ ================================');
  console.log(`üì° HTTP Server: http://localhost:${PORT}`);
  console.log(`üîå WebSocket: ws://localhost:${PORT}/socket.io/`);
  console.log(`üìä Health Check: http://localhost:${PORT}/health`);
  console.log(`üîç WebSocket Info: http://localhost:${PORT}/api/websocket/info`);
  console.log('üéâ ================================\n');
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM Ïã†Ìò∏ ÏàòÏã†, ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë...');
  
  if (websocketService) {
    websocketService.close();
  }
  
  server.close(() => {
    console.log('‚úÖ ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§');
    process.exit(0);
  });
});

export default app;
EOF

# ============================================================================
# 4Ô∏è‚É£ package.jsonÏóê socket.io ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä
# ============================================================================

echo "üì¶ Socket.IO ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä Ï§ë..."

# package.jsonÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
if [ -f package.json ]; then
  # Socket.IO ÏÑ§Ïπò
  npm install socket.io @types/socket.io
  echo "‚úÖ Socket.IO ÏÑ§Ïπò ÏôÑÎ£å"
else
  echo "‚ùå package.jsonÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. backend ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî."
fi

# ============================================================================
# 5Ô∏è‚É£ Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏ Í∞úÏÑ†
# ============================================================================

echo "üîß Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏ Í∞úÏÑ† Ï§ë..."

# package.json Ïä§ÌÅ¨Î¶ΩÌä∏ ÏóÖÎç∞Ïù¥Ìä∏
node -e "
const fs = require('fs');
if (fs.existsSync('package.json')) {
  const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  pkg.scripts = {
    ...pkg.scripts,
    'kill-port': 'lsof -ti:3001 | xargs kill -9 || echo \"Port 3001 is not in use\"',
    'dev-clean': 'npm run kill-port && sleep 2 && npm run dev',
    'dev-ws': 'npm run kill-port && sleep 2 && tsx watch src/app.ts',
    'start-ws': 'npm run kill-port && sleep 2 && node dist/app.js'
  };
  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
  console.log('‚úÖ package.json Ïä§ÌÅ¨Î¶ΩÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
} else {
  console.log('‚ùå package.json ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
}
"

echo ""
echo "üéâ ================================"
echo "‚úÖ WebSocket ÎùºÏö∞Ìä∏ Ï∂îÍ∞Ä ÏôÑÎ£å!"
echo "üéâ ================================"
echo ""
echo "üîß Ìï¥Í≤∞Îêú Î¨∏Ï†úÎì§:"
echo "  ‚úÖ /ws Í≤ΩÎ°ú 404 ÏóêÎü¨ Ìï¥Í≤∞"
echo "  ‚úÖ WebSocket ÏÑúÎπÑÏä§ Ï∂îÍ∞Ä"
echo "  ‚úÖ Socket.IO ÌÜµÌï©"
echo "  ‚úÖ Ïã§ÏãúÍ∞Ñ CUE/Ìå®Ïä§Ìè¨Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏßÄÏõê"
echo "  ‚úÖ CORS Î∞è Î≥¥Ïïà ÏÑ§Ï†ï ÏôÑÎ£å"
echo ""
echo "üöÄ ÏÑúÎ≤Ñ Ïã§Ìñâ Î∞©Î≤ï:"
echo "  1. Ï†ïÎ¶¨ ÌõÑ Ïã§Ìñâ (Í∂åÏû•): npm run dev-clean"
echo "  2. WebSocket Ìè¨Ìï® Ïã§Ìñâ: npm run dev-ws"
echo "  3. Í∏∞Î≥∏ Ïã§Ìñâ: npm run dev"
echo ""
echo "üîå WebSocket ÌÖåÏä§Ìä∏:"
echo "  - HTTP: http://localhost:3001/health"
echo "  - WebSocket Info: http://localhost:3001/api/websocket/info"
echo "  - Socket.IO: ws://localhost:3001/socket.io/"
echo ""
echo "‚ú® Ïù¥Ï†ú ÌîÑÎ°†Ìä∏ÏóîÎìúÏùò WebSocket Ïó∞Í≤∞Ïù¥ Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§!"